{
  "subreddit": "rust",
  "url": "https://www.reddit.com/r/rust",
  "meta": {
    "title": "The Rust Programming Language"
  },
  "posts": [
    {
      "title": "[Media] I abandoned my terminal chat app halfway through and built a TUI framework instead",
      "permalink": "https://www.reddit.com/r/rust/comments/1n0q464/media_i_abandoned_my_terminal_chat_app_halfway/",
      "score": 466,
      "comments": 24,
      "post_id": "t3_1n0q464",
      "post_type": "gif",
      "domain": "i.redd.it",
      "author": "NyproTheGeek",
      "author_id": "t2_10g742",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-26T16:12:48.122000+0000",
      "content_href": "https://i.redd.it/pj42xyk90elf1.gif",
      "content_preview": "",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": "https://styles.redditmedia.com/t5_cfb43/styles/profileIcon_zumob31cwkee1.jpg?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=3537c02192ba0e655052e68aed50a422fa69252b"
    },
    {
      "title": "A complete map of the Rust type system",
      "permalink": "https://www.reddit.com/r/rust/comments/1n2ugh3/a_complete_map_of_the_rust_type_system/",
      "score": 405,
      "comments": 50,
      "post_id": "t3_1n2ugh3",
      "post_type": "link",
      "domain": "rustcurious.com",
      "author": "rustcurious",
      "author_id": "t2_1txmxawp38",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-29T01:35:24.901000+0000",
      "content_href": "https://rustcurious.com/elements/",
      "content_preview": "",
      "flair": [
        "üß† educational"
      ],
      "thumbnail_url": "https://styles.redditmedia.com/t5_ez32hd/styles/profileIcon_nu2qs3vjmydf1.png?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=1de071e9579d8f2ecd81784b9a790d658612593f"
    },
    {
      "title": "Why majority of available positions in Rust are just blockchain/web3 and mostly scams?",
      "permalink": "https://www.reddit.com/r/rust/comments/1n5nvae/why_majority_of_available_positions_in_rust_are/",
      "score": 316,
      "comments": 115,
      "post_id": "t3_1n5nvae",
      "post_type": "text",
      "domain": "self.rust",
      "author": "TITAN9389",
      "author_id": "t2_ja1k1",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-09-01T12:52:15.328000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n5nvae/why_majority_of_available_positions_in_rust_are/",
      "content_preview": "Did rust become the language of scam blockchain projects ? How someone should land a job as rust beginner if has 0 interest in blockchain, either they ask for 10 years of experience with Rust or blockchain/solana‚Ä¶etc which 99% of them will just vanish in few months.",
      "flair": [],
      "thumbnail_url": ""
    },
    {
      "title": "Rust promotes logical correctness",
      "permalink": "https://www.reddit.com/r/rust/comments/1n2i8wn/rust_promotes_logical_correctness/",
      "score": 251,
      "comments": 54,
      "post_id": "t3_1n2i8wn",
      "post_type": "text",
      "domain": "self.rust",
      "author": "TechyAman",
      "author_id": "t2_dszjghjd7",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-28T17:15:54.363000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n2i8wn/rust_promotes_logical_correctness/",
      "content_preview": "We have a Fintech application. I had developed a service in Java. Clients were reporting mistakes sometimes. But we were not able to pinpoint the issue. We started migrating this service to rust mainly expecting performance gains. While rewriting in rust I was forced to think more about my code, because my code had to be written a little differently in rust. While thinking about my logic to plan the code in my head, I found some issues in the way the logic was written in Java. I fixed the logic in rust and our solution became successful and accurate. We never faced any issues after that. So the rust rewrite that was started for performance gains ended up in fixing the issues and making this service successful. Edit: The calculation that took 16 hours in java and was unviable, now in rust just taken 2 hours. Edit2: i have to admit that writing code in rust was going to take a lot of effort so i wanted to get it right before i put in so much effort. i read the old code many times and absorbed it. Then I stepped thru each step in my mind also doing dry runs. This led to a much better solution. That why i wrote- rust promotes logical correctness.",
      "flair": [],
      "thumbnail_url": ""
    },
    {
      "title": "What does This Week in Rust mean to you?",
      "permalink": "https://www.reddit.com/r/rust/comments/1n11joo/what_does_this_week_in_rust_mean_to_you/",
      "score": 240,
      "comments": 41,
      "post_id": "t3_1n11joo",
      "post_type": "text",
      "domain": "self.rust",
      "author": "seino_chan",
      "author_id": "t2_eki22",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-26T23:36:55.568000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n11joo/what_does_this_week_in_rust_mean_to_you/",
      "content_preview": "Hello all! I'm Nell Shamrell-Harrington, and I've been lead editor of This Week in Rust since 2020. In 2021, I gave the RustConf closing keynote \"This Week in Rust - 400 Issues and Counting\". I'm working on an updated version of this talk and want to ask here - what does This Week in Rust mean to you? Have you contributed to it? Has your work been featured in it? How has it played a part in your journey as a Rust developer?",
      "flair": [],
      "thumbnail_url": ""
    },
    {
      "title": "Brian Kernighan on Rust",
      "permalink": "https://www.reddit.com/r/rust/comments/1n5h3gi/brian_kernighan_on_rust/",
      "score": 222,
      "comments": 287,
      "post_id": "t3_1n5h3gi",
      "post_type": "link",
      "domain": "thenewstack.io",
      "author": "chaotic-kotik",
      "author_id": "t2_g80r0",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-09-01T06:15:13.305000+0000",
      "content_href": "https://thenewstack.io/unix-co-creator-brian-kernighan-on-rust-distros-and-nixos/",
      "content_preview": "",
      "flair": [
        "üéôÔ∏è discussion"
      ],
      "thumbnail_url": "https://external-preview.redd.it/aNVMRLWPh-Jwq8kE-7_gqqbXFuMfmtuhUClk8ZrCw3U.png?width=140&height=93&crop=140:93,smart&auto=webp&s=ac05df276bf0baba40d2dd2a0751b432f60fcc6e"
    },
    {
      "title": "Redox OS Self-hosted Presentation for RustConf 2025",
      "permalink": "https://www.reddit.com/r/rust/comments/1n2hc3y/redox_os_selfhosted_presentation_for_rustconf_2025/",
      "score": 168,
      "comments": 13,
      "post_id": "t3_1n2hc3y",
      "post_type": "crosspost",
      "domain": "youtube.com",
      "author": "jackpot51",
      "author_id": "t2_40yxe",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-28T16:41:53.770000+0000",
      "content_href": "/r/Redox/comments/1n2h5rk/redox_os_selfhosted_presentation_for_rustconf_2025/",
      "content_preview": "",
      "flair": [],
      "thumbnail_url": "https://styles.redditmedia.com/t5_212mvz/styles/profileIcon_753wck226fca1.jpg?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=1e39179b5617edce32ef839fb4e96d655a526062"
    },
    {
      "title": "Group Borrowing: Zero-Cost Memory Safety with Fewer Restrictions",
      "permalink": "https://www.reddit.com/r/rust/comments/1n2cxk8/group_borrowing_zerocost_memory_safety_with_fewer/",
      "score": 161,
      "comments": 31,
      "post_id": "t3_1n2cxk8",
      "post_type": "link",
      "domain": "verdagon.dev",
      "author": "nicoburns",
      "author_id": "t2_e9zfj",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-28T13:57:06.083000+0000",
      "content_href": "https://verdagon.dev/blog/group-borrowing",
      "content_preview": "",
      "flair": [],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_7.png"
    },
    {
      "title": "Rustdoc now has a nightly feature to allow having macro expansion in source code pages",
      "permalink": "https://www.reddit.com/r/rust/comments/1n1gnel/rustdoc_now_has_a_nightly_feature_to_allow_having/",
      "score": 150,
      "comments": 23,
      "post_id": "t3_1n1gnel",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "imperioland",
      "author_id": "t2_mhlck",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T13:11:32.218000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n1gnel/rustdoc_now_has_a_nightly_feature_to_allow_having/",
      "content_preview": "By enabling the --generate-macro-expansion on nightly rustdoc, you can now get \"expansion buttons\" in the source code pages to see what macro expanded code looks like. Don't hesitate to give it a try! PR: https://github.com/rust-lang/rust/pull/137229",
      "flair": [
        "üì¢ announcement"
      ],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_4.png"
    },
    {
      "title": "[ANN] MathCore 0.3.1 - Symbolic math library for Rust (like SymPy but for Rust!)",
      "permalink": "https://www.reddit.com/r/rust/comments/1n3zly9/ann_mathcore_031_symbolic_math_library_for_rust/",
      "score": 148,
      "comments": 15,
      "post_id": "t3_1n3zly9",
      "post_type": "text",
      "domain": "self.rust",
      "author": "Nonantiy",
      "author_id": "t2_715n2j2w",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-30T11:48:30.065000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n3zly9/ann_mathcore_031_symbolic_math_library_for_rust/",
      "content_preview": "Hey Rustaceans! üëã I'm excited to share MathCore, a symbolic mathematics library that brings computer algebra system capabilities to Rust. ## What it does - **Symbolic math**: Parse and manipulate expressions like \"x^2 + 2*x + 1\" - **Calculus**: Differentiate and integrate symbolically - **Equation solving**: From simple linear to complex polynomial equations - **Differential equations**: Solve ODEs and PDEs - **Matrix operations**: Powered by nalgebra - **Arbitrary precision**: BigInt/BigRational for exact arithmetic - **And more**: FFT, complex numbers, numerical methods ## Quick example use mathcore::MathCore;\nfn main() {\nlet math = MathCore::new();\n// Symbolic differentiation\nlet derivative = MathCore::differentiate(\"sin(x^2)\", \"x\").unwrap();\nprintln!(\"{}\", derivative); // 2*x*cos(x^2)\n// Solve equations\nlet roots = MathCore::solve(\"x^2 - 5*x + 6\", \"x\").unwrap();\n// roots: [2, 3]\n// Evaluate with variables\nlet result = math.calculate(\"2*pi*r\", &[(\"r\", 5.0)]).unwrap();\n// result: 31.415...\n} Why another math library? I needed symbolic math in Rust for a physics simulation project. While there are great numerical libraries (like nalgebra), I couldn't find a comprehensive CAS for Rust. MathCore fills that gap. Links - Crates.io: https://crates.io/crates/mathcore - GitHub: https://github.com/Nonanti/mathcore - Docs: https://docs.rs/mathcore Would love to hear your feedback and use cases! PRs welcome ü¶Ä",
      "flair": [],
      "thumbnail_url": ""
    },
    {
      "title": "I went through all the RFCs and Tracking Issues, here are the ones I'm most excited about",
      "permalink": "https://www.reddit.com/r/rust/comments/1n1t4g6/i_went_through_all_the_rfcs_and_tracking_issues/",
      "score": 146,
      "comments": 35,
      "post_id": "t3_1n1t4g6",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "nikitarevenco",
      "author_id": "t2_10kvw6qx4a",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T21:05:23.816000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n1t4g6/i_went_through_all_the_rfcs_and_tracking_issues/",
      "content_preview": "Still RFCs that have not yet been accepted: Macro fragment fields https://github.com/rust-lang/rfcs/pull/3714 #[diagnostic::blocking] https://github.com/rust-lang/rfcs/pull/3639 Named macro capture groups https://github.com/rust-lang/rfcs/pull/3649 #[cfg_alias] https://github.com/rust-lang/rfcs/pull/3804 Tuple unpacking https://github.com/rust-lang/rfcs/pull/3723 Generic integers https://github.com/rust-lang/rfcs/pull/3686 #[derive(Default)] on enum variants with fields https://github.com/rust-lang/rfcs/pull/3683 postfix .match https://github.com/rust-lang/rust/issues/121618 postfix .macros!() https://github.com/rust-lang/rfcs/pull/2442 Has tracking issues: become (explicit tail calls) https://github.com/rust-lang/rust/issues/112788 cargo script https://github.com/rust-lang/cargo/issues/12207 core::mem::variant_count https://github.com/rust-lang/rust/issues/73662 Deref patterns https://github.com/rust-lang/rust/issues/87121 cfg_select! https://github.com/rust-lang/rust/issues/115585 Custom inner attributes https://github.com/rust-lang/rust/issues/54726 Iterator::intersperse https://github.com/rust-lang/rust/issues/79524 Declarative macros 2.0 https://github.com/rust-lang/rust/issues/39412 Default field values https://github.com/rust-lang/rust/issues/132162 Delegation https://github.com/rust-lang/rust/issues/118212 Guard patterns https://github.com/rust-lang/rust/issues/129967 gen blocks and functions https://github.com/rust-lang/rust/issues/117078 if let guard https://github.com/rust-lang/rust/issues/51114 TAIT https://github.com/rust-lang/rust/issues/63063 ! https://github.com/rust-lang/rust/issues/35121 std::range - New range type https://github.com/rust-lang/rust/issues/123741#issue-2236353974 Trait alias https://doc.rust-lang.org/beta/unstable-book/language-features/trait-alias.html try blocks https://github.com/rust-lang/rust/issues/31436 Macro meta-variable expressions https://github.com/rust-lang/rust/issues/83527 https://github.com/rust-lang/rust/issues/124225 macro_rules! derive macros https://github.com/rust-lang/rust/issues/143549 macro_rules! attribute macros https://github.com/rust-lang/rust/issues/143547 Step trait for a..b syntax overloading https://github.com/rust-lang/rust/issues/42168 hash_map! macro https://github.com/rust-lang/rust/issues/144032 I would love if we got any 1 of those before chrismas, (maybe the if let guard :D)",
      "flair": [],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_2.png"
    },
    {
      "title": "Jane street - rust for everyone",
      "permalink": "https://www.reddit.com/r/rust/comments/1n1m2nh/jane_street_rust_for_everyone/",
      "score": 132,
      "comments": 27,
      "post_id": "t3_1n1m2nh",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "Krakenops744",
      "author_id": "t2_83jxgkfn0",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T16:39:23.473000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n1m2nh/jane_street_rust_for_everyone/",
      "content_preview": "https://youtu.be/R0dP-QR5wQo?si=9J1z5E1XQx2VTUSh EDIT: The presenter in the video provided links to the covered materials in the comments below: https://www.reddit.com/r/rust/comments/1n1m2nh/jane_street_rust_for_everyone/nb4p2pf/",
      "flair": [
        "üß† educational"
      ],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_4.png"
    },
    {
      "title": "Would you consider Rust + Tauri a replacement for Javascript + Electron ?",
      "permalink": "https://www.reddit.com/r/rust/comments/1n56sh5/would_you_consider_rust_tauri_a_replacement_for/",
      "score": 123,
      "comments": 77,
      "post_id": "t3_1n56sh5",
      "post_type": "text",
      "domain": "self.rust",
      "author": "CodingMountain",
      "author_id": "t2_1w30z2s4p8",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-31T21:34:38.486000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n56sh5/would_you_consider_rust_tauri_a_replacement_for/",
      "content_preview": "I am a huge rust fan but heard that styling of UI components isn't as granular possible as in Electron apps due to CSS. Is this still true ? When would you recommend to not use Rust + Tauri ?",
      "flair": [],
      "thumbnail_url": "https://styles.redditmedia.com/t5_f85bad/styles/profileIcon_nhj4rn9n0ckf1.jpeg?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=06976eb83004df47ba5d1177c03304308863ffa5"
    },
    {
      "title": "[Media] A single file Rust project and source code",
      "permalink": "https://www.reddit.com/r/rust/comments/1n3wnqx/media_a_single_file_rust_project_and_source_code/",
      "score": 122,
      "comments": 20,
      "post_id": "t3_1n3wnqx",
      "post_type": "image",
      "domain": "i.redd.it",
      "author": "hamidrezakp",
      "author_id": "t2_351p9a5x",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-30T08:43:44.239000+0000",
      "content_href": "https://i.redd.it/0cffxldcd4mf1.jpeg",
      "content_preview": "",
      "flair": [
        "üß† educational"
      ],
      "thumbnail_url": "https://preview.redd.it/media-a-single-file-rust-project-and-source-code-v0-0cffxldcd4mf1.jpeg?width=640&crop=smart&auto=webp&s=b9c7fb2d63cd12115e6424048ab888b2c7f46f79"
    },
    {
      "title": "Introducing phantomci ‚Äì A lean, mean, Rust‚Äëpowered, headless self‚Äëhosted runner that doesn‚Äôt phone home",
      "permalink": "https://www.reddit.com/r/rust/comments/1n4giz6/introducing_phantomci_a_lean_mean_rustpowered/",
      "score": 108,
      "comments": 14,
      "post_id": "t3_1n4giz6",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "blueeyesginger",
      "author_id": "t2_4eaguirh",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-31T00:06:45.354000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n4giz6/introducing_phantomci_a_lean_mean_rustpowered/",
      "content_preview": "I‚Äôve been tinkering with something I couldn‚Äôt find in existing runners‚Äîso I built it myself. Meet phantomci : Rust-based & headless ‚Äî No GUI, no excess, just a compiled binary. Zero outbound connections ‚Äî PhantomCI communicates strictly with GitHub Actions; it won‚Äôt call back home for gossip. (See ‚Äúno unnecessary outbound connections‚Äù) Self-hosted runner ‚Äî Light, secure, and predictable. Great if you‚Äôre fed up with the bloated, flaky defaults. Here‚Äôs the GitHub repo: helloimalemur/phantomci . Why it matters for sysadmins, bug bounty hunters, and security nerds: Eliminates attack surface by cutting outbound noise. Streamlined for production‚Äîzero fluff, just performance. Fits perfectly for environments that scream ‚Äúminimum privilege.‚Äù Check it out if you: Want a leaner GitHub Actions runner. Hate surprises or unnecessary network chatter. Value control above convenience. Feedback, criticism, or war stories welcome‚ÄîI‚Äôm here to iterate, fortify, and evolve this into something we all deploy without second thoughts.",
      "flair": [],
      "thumbnail_url": "https://styles.redditmedia.com/t5_24908u/styles/profileIcon_kqnr4l59cqge1.jpg?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=cfcdefc4c990215501d8e9a4634a408ccdf57c0f"
    },
    {
      "title": "Rust chess engine",
      "permalink": "https://www.reddit.com/r/rust/comments/1n3hudr/rust_chess_engine/",
      "score": 108,
      "comments": 23,
      "post_id": "t3_1n3hudr",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "Flashy-Assistance678",
      "author_id": "t2_1oxafu0kb9",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-29T20:09:03.442000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n3hudr/rust_chess_engine/",
      "content_preview": "A few months ago decided i wanted to learn a new language and i picked rust as it is modern, low-level and aparently everybody loves it. I also hate watching tutorials or courses as i find them taking to much time and giving to less in return. I decided to start a project and learn along. I am also a chess player and I always wanted to make something chess related. Thats how my chess engine made in rust was born. After few months of development with some setbacks i ended core of it. It still has a long path to release but it already searches moves and  solves several positions. It was actually my first complex low-level project so it probably is not as optimal as it could and structure might be messy but I plan to clean it in free time. I would appreciate any advises or help. All i want is to learn and grow as a programmer. Here is link to github repo: https://github.com/M4rcinWisniewski/RustChessEngine",
      "flair": [],
      "thumbnail_url": ""
    },
    {
      "title": "I thought I prettu much understood lifetime basics",
      "permalink": "https://www.reddit.com/r/rust/comments/1n4tlbw/i_thought_i_prettu_much_understood_lifetime_basics/",
      "score": 96,
      "comments": 39,
      "post_id": "t3_1n4tlbw",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "swaan79",
      "author_id": "t2_1lm8e2k4",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-31T12:36:52.240000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n4tlbw/i_thought_i_prettu_much_understood_lifetime_basics/",
      "content_preview": "Like the title says, I thought my mental model for lifetimes was fairly good. I don't claim to be an expert but I generally don't get blocked by them anymore. But now I have a really short code snippet that doesn't work and I don't understand what's wrong with it: pub struct Thing<'a> {\n¬† ¬† data: &'a mut [u8],\n}\n\nimpl<'a> Thing<'a> {\n¬† ¬† pub fn get_it<'s>(&'s mut self) -> &'a [u8] {\n¬† ¬† ¬† ¬† self.data\n¬† ¬† }\n} The error I get is: error: lifetime may not live long enough\n--> <source>:9:9\n  |\n7 | impl<'a> Thing<'a> {\n  |      -- lifetime `'a` defined here\n8 |     pub fn get_it<'s>(&'s mut self) -> &'a [u8] {\n  |                   -- lifetime `'s` defined here\n9 |         self.data\n  |         ^^^^^^^^^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'s`\n  |\n  = help: consider adding the following bound: `'s: 'a`\n\nerror: aborting due to 1 previous error ( godbolt ) So what I'm trying to do is that Thing gets a mutable reference to a buffer when it's created and then the get_it returns a slice from that buffer (simplified here as returning the entire slice). I figured that would just work because I return something that should outlive self to begin with. But that clearly doesn't work. If I add the 's: 'a bound, I'm saying that the reference to self must outlive the buffer, which doesn't really matter I think. Or is it related to data being mutable reference? If I remove all the mut 's it compiles just fine. What am I missing? Thanks",
      "flair": [
        "üôã seeking help & advice"
      ],
      "thumbnail_url": ""
    },
    {
      "title": "[media] Tired of jumping to browser tabs for docs when I code, so I wrote a tiny Rust CLI",
      "permalink": "https://www.reddit.com/r/rust/comments/1n47vxp/media_tired_of_jumping_to_browser_tabs_for_docs/",
      "score": 86,
      "comments": 16,
      "post_id": "t3_1n47vxp",
      "post_type": "image",
      "domain": "i.redd.it",
      "author": "mr_dudo",
      "author_id": "t2_iot00qbe8",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-30T17:48:33.897000+0000",
      "content_href": "https://i.redd.it/lf0idc2n27mf1.jpeg",
      "content_preview": "",
      "flair": [],
      "thumbnail_url": "https://preview.redd.it/media-tired-of-jumping-to-browser-tabs-for-docs-when-i-code-v0-lf0idc2n27mf1.jpeg?width=640&crop=smart&auto=webp&s=ac20006922a7096cae387322a12108c2cbacd5ae"
    },
    {
      "title": "[Media] Introducing Hopp, an open source remote pair programming app written in Rust",
      "permalink": "https://www.reddit.com/r/rust/comments/1n0wyxr/media_introducing_hopp_an_open_source_remote_pair/",
      "score": 85,
      "comments": 13,
      "post_id": "t3_1n0wyxr",
      "post_type": "gif",
      "domain": "i.redd.it",
      "author": "AnotherRandomUser400",
      "author_id": "t2_cduc51pgw",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-26T20:29:54.097000+0000",
      "content_href": "https://i.redd.it/29am9pn29flf1.gif",
      "content_preview": "",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_0.png"
    },
    {
      "title": "Zoi, an advanced package manager",
      "permalink": "https://www.reddit.com/r/rust/comments/1n59dof/zoi_an_advanced_package_manager/",
      "score": 70,
      "comments": 39,
      "post_id": "t3_1n59dof",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "Important-Toe-9188",
      "author_id": "t2_17xvql84z0",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-31T23:30:38.327000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n59dof/zoi_an_advanced_package_manager/",
      "content_preview": "Hi, I'm building a universal package manager, think of it like a highly customizable universal AUR for all platforms (including FreeBSD and OpenBSD). I'm gonna show you some of the features. You can install a package from active repos: $ zoi install hello You can install a package from a repo: $ zoi install @hola/hola You can install a package with a custom version: $ zoi install package@v1.2.0 You can update a package: $ zoi update package # all for updating all installed packages You can pin a package to a specific version to stop updates above that version: $ zoi pin package v1.2.0 # unpin to unpin the pinned package You can uninstall a package: $ zoi uninstall package You can add a repo to the active list: $ zoi repo add repo-name And more, like search, list, and show packages info, and build packages from source. And a lot of dependency features with compatibility with existing package managers. Also you can use a custom registry and add your own repos (if you don't want to change the entire registry) The registry uses git because when updating existing packages and adding new ones the sync process will be fast because we're not downloading the entire registry again. My current aim is to make the package manager provide safe packages with security verifications, I already implemented checksums verification and signature verification. But I need help building it, the project is expanding and I'm the only maintainer with no contributors, if you find this project interesting please consider to contribute, every contribution counts. And if you have time and the experience to co-maintain this project with me please consider contacting me, I could offer a GitLab Ultimate seat also. My email: zillowez@gmail.com GitHub https://github.com/Zillowe/Zoi Docs https://zillowe.qzz.io/docs/zds/zoi I have a lot plans and features to implement with a little time, please consider helping. The roadmap for v5 beta is at ROADMAP.md in the repo All features are documented on the docs site.",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": ""
    },
    {
      "title": "rv: a new kind of management tool for Ruby (inspired by uv, written in Rust)",
      "permalink": "https://www.reddit.com/r/rust/comments/1n12e7c/rv_a_new_kind_of_management_tool_for_ruby/",
      "score": 67,
      "comments": 5,
      "post_id": "t3_1n12e7c",
      "post_type": "link",
      "domain": "andre.arko.net",
      "author": "kibwen",
      "author_id": "t2_7b7l2",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T00:14:51.668000+0000",
      "content_href": "https://andre.arko.net/2025/08/25/rv-a-new-kind-of-ruby-management-tool/",
      "content_preview": "",
      "flair": [],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_6.png"
    },
    {
      "title": "[Media] azalea-graphics, a fork of azalea providing a renderer for minecraft",
      "permalink": "https://www.reddit.com/r/rust/comments/1n536yk/media_azaleagraphics_a_fork_of_azalea_providing_a/",
      "score": 66,
      "comments": 11,
      "post_id": "t3_1n536yk",
      "post_type": "image",
      "domain": "i.redd.it",
      "author": "shalomleha",
      "author_id": "t2_4zsha9ur",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-31T19:09:11.757000+0000",
      "content_href": "https://i.redd.it/bwcar5yvlemf1.png",
      "content_preview": "",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_3.png"
    },
    {
      "title": "Announcing Axum Test 18 with powerful new json assertions",
      "permalink": "https://www.reddit.com/r/rust/comments/1n40vsl/announcing_axum_test_18_with_powerful_new_json/",
      "score": 65,
      "comments": 9,
      "post_id": "t3_1n40vsl",
      "post_type": "text",
      "domain": "self.rust",
      "author": "StudioFo",
      "author_id": "t2_6xzqterm",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-30T12:52:40.892000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n40vsl/announcing_axum_test_18_with_powerful_new_json/",
      "content_preview": "Last week I released a major new feature in the Axum Test crate for easier assertions of JSON responses, called 'expect json' . This allows you to validate the shape and constraints of what is returned. The crate is available here: https://crates.io/crates/axum-test A problem that comes up often in tests is when you have to verify values generated at runtime. Such as randomly generated UUIDs, or unpredictable date times. I've set out to tackle this through a new JSON comparison and expectations system, which allows you to assert the shape and constraints on that data. i.e. Ensuring a creation time is a UTC ISO date time from within the last 60 seconds. Here is example code to give a taste of what this looks like: use std::time::Duration;\nuse axum_test::TestServer;\nuse axum_test::expect_json;\n\n// Setup my application\nlet app = Router::new()\n    .route(&\"/user/example\", get(|| async {\n        // ... lookup and return user from the DB ...\n    }));\n\n// Create your test server as usual\nlet server = TestServer::new(app)?;\n\n// Assert the shape matches the expectations\nserver.get(&\"/user/example\")\n    .await\n    .assert_json(&json!({\n        // expect an exact value for the name\n        \"name\": \"Example\",\n\n        // expect a valid UUID\n        \"id\": expect_json::uuid(),\n\n        // expect it to be created within the last minute\n        \"created_at\": expect_json::iso_date_time()\n                .utc()\n                .within_past(Duration::from_secs(60))\n    })); It also allows nesting for arrays and objects too: server.get(&\"/users\")\n    .await\n    .assert_json(&json!({\n        // expect an array of 3 unique users\n        \"users\": expect_json::array()\n            .len(3)\n            .unique()\n            // each user object should have this shape\n            .contains(&json({\n                \"name\": expect_json::string().not_empty(),\n                \"id\": expect_json::uuid(),\n                \"created_at\": expect_json::iso_date_time()\n                    .utc()\n                    .within_past(Duration::from_secs(60))\n            }))\n    })); ... and many other ways. What's also cool is you can define your own expectations too! It's pretty sick. So if you work on a codebase with a bespoke ID format, you can build an expectation to handle that type. An example of doing that is in the docs here: https://docs.rs/axum-test/latest/axum_test/expect_json/expect_core/trait.ExpectOp.html#example It's been a lot of work getting this done, and I'm eager to see people try this out and hear their thoughts. I'm planning to add more and am looking for feedback first. Expect Json is also available as a stand-alone crate here ( https://crates.io/crates/expect-json ) for anyone interested in using it on its own.",
      "flair": [],
      "thumbnail_url": ""
    },
    {
      "title": "Professional rustaceans, what's your story?",
      "permalink": "https://www.reddit.com/r/rust/comments/1n1t161/professional_rustaceans_whats_your_story/",
      "score": 60,
      "comments": 48,
      "post_id": "t3_1n1t161",
      "post_type": "text",
      "domain": "self.rust",
      "author": "DuncSully",
      "author_id": "t2_8h4zm",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T21:01:50.893000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n1t161/professional_rustaceans_whats_your_story/",
      "content_preview": "That is, anyone who uses Rust in their job, how did you go about it? What is your background? Did you learn Rust separately and happen to find a job using it? Did you successfully introduce Rust into your current position? Long story short, I'm curious in general but specifically I'm a web app dev who is considering transitioning careers eventually, and I'm definitely fascinated with Rust being a truly general purpose language, and just a general change of pace from my comfort zone of TypeScript. I didn't realize it essentially had FE WASM frameworks, so I figured it's possible I could at least shift my hobby projects to going down that route as I get more familiar with the language. I simply do not have a background in systems programming which seems to be where the biggest movement is happening. So, again, I'm curious about absolutely anyone's professional experience, but I'm also trying to figure out if there's any hope of transitioning in the near future, if it's more of a 5-10 year plan, or if I might as well ask a magic 8 ball. edit: typos",
      "flair": [],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_2.png"
    },
    {
      "title": "This Week in Rust #614",
      "permalink": "https://www.reddit.com/r/rust/comments/1n1znfa/this_week_in_rust_614/",
      "score": 59,
      "comments": 8,
      "post_id": "t3_1n1znfa",
      "post_type": "link",
      "domain": "this-week-in-rust.org",
      "author": "b-dillo",
      "author_id": "t2_oswzzx7qi",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-28T01:47:25.409000+0000",
      "content_href": "https://this-week-in-rust.org/blog/2025/08/27/this-week-in-rust-614/",
      "content_preview": "",
      "flair": [
        "üìÖ this week in rust"
      ],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_2.png"
    },
    {
      "title": "Good scripting language embeddable in Rust?",
      "permalink": "https://www.reddit.com/r/rust/comments/1n15s9y/good_scripting_language_embeddable_in_rust/",
      "score": 58,
      "comments": 55,
      "post_id": "t3_1n15s9y",
      "post_type": "text",
      "domain": "self.rust",
      "author": "TheNew1234_",
      "author_id": "t2_1ao112f800",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T02:54:43.253000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n15s9y/good_scripting_language_embeddable_in_rust/",
      "content_preview": "Hello Rustaceans! I want to know if there is a statically typed, Object oriented preferred (but struct + impl blocks style is also fine) I like Angelscript but the only crates for it that exists is a raw one that mostly uses unsafe code. Other languages purely for Rust do have a good typing system, but are functional which I don't really like. Wasm is a good option, but you can only provide pure functions (No namespaces and have to do type conversion). So it's like a C API ( I don't inherently hate C but I don't like the way it's APIs functions are named since there is no namespaces or object method. I hope you understand why I didn't consider WASM, and hope my explanation was all I need to share.",
      "flair": [
        "üôã seeking help & advice"
      ],
      "thumbnail_url": "https://styles.redditmedia.com/t5_cnl2qa/styles/profileIcon_1sr860b7ik2f1.jpeg?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=1f09d8ef1e32031ce76ac0e671ae881938c20599"
    },
    {
      "title": "In-Memory Filesystems in Rust",
      "permalink": "https://www.reddit.com/r/rust/comments/1n0uaaj/inmemory_filesystems_in_rust/",
      "score": 52,
      "comments": 9,
      "post_id": "t3_1n0uaaj",
      "post_type": "link",
      "domain": "andre.arko.net",
      "author": "kibwen",
      "author_id": "t2_7b7l2",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-26T18:47:53.815000+0000",
      "content_href": "https://andre.arko.net/2025/08/18/in-memory-filesystems-in-rust/",
      "content_preview": "",
      "flair": [],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_6.png"
    },
    {
      "title": "Destructure as a Reminder",
      "permalink": "https://www.reddit.com/r/rust/comments/1n3hczf/destructure_as_a_reminder/",
      "score": 51,
      "comments": 29,
      "post_id": "t3_1n3hczf",
      "post_type": "link",
      "domain": "home.expurple.me",
      "author": "Expurple",
      "author_id": "t2_8tg3j2yc",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-29T19:49:52.351000+0000",
      "content_href": "https://home.expurple.me/posts/destructure-as-a-reminder/",
      "content_preview": "",
      "flair": [
        "üß† educational"
      ],
      "thumbnail_url": ""
    },
    {
      "title": "Miso: A swiss table implementation from scratch in rust",
      "permalink": "https://www.reddit.com/r/rust/comments/1n4q4vb/miso_a_swiss_table_implementation_from_scratch_in/",
      "score": 50,
      "comments": 5,
      "post_id": "t3_1n4q4vb",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "thetinygoat",
      "author_id": "t2_3vatevt",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-31T09:13:14.638000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n4q4vb/miso_a_swiss_table_implementation_from_scratch_in/",
      "content_preview": "Hi everyone, excited to share what i've been working on for a couple of weeks. I got interested in implementing a hashmap after reading about them in some detail. I wanted to implement open-adressing but after reading about swiss tables, i decided to dive into the deep end. This is my attempt at writing a swiss table, just for pure learning purposes. It's been fun learning about simd and low level bit manipulation. I would love some feedback on the design or any aspect of the project. I plan to turn this into a sharded hashmap next for high concurrency workloads. Thank you! link to the repo: https://github.com/thetinygoat/miso",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": ""
    },
    {
      "title": "dynify now has a macro for heapless async traits",
      "permalink": "https://www.reddit.com/r/rust/comments/1n36f4h/dynify_now_has_a_macro_for_heapless_async_traits/",
      "score": 50,
      "comments": 8,
      "post_id": "t3_1n36f4h",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "loichyan",
      "author_id": "t2_ermxuf4o",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-29T12:43:59.955000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n36f4h/dynify_now_has_a_macro_for_heapless_async_traits/",
      "content_preview": "Hello, fellow Rustaceans! dynify is another crate to make async traits dyn compatible. The main selling point is that dynify doesn't require async methods to return a boxed Future . Recently, I added an attribute macro #[dynify] to make using dynify as straightforward as #[async_trait] . Basically, you only need to place #[dynify] to the target trait, and it will generate a dyn compatible variant for that trait: #[dynify::dynify]\ntrait AsyncRead {\n    async fn read_to_string(&mut self) -> String;\n} To invoke an async method, you need to choose where its return value is allocated, stack or heap: async fn dynamic_dispatch(reader: &mut dyn DynAsyncRead) {\n    let mut stack = [MaybeUninit::<u8>::uninit(); 16];\n    let mut heap = Vec::<MaybeUninit<u8>>::new();\n    // Initialize the trait object on the stack if not too large, otherwise the heap\n    let fut = reader.read_to_string().init2(&mut stack, &mut heap);\n    let content = fut.await;\n    // ...\n}",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": ""
    },
    {
      "title": "Released Ohkami v0.24: A performant, declarative, and runtime-flexible web framework for Rust",
      "permalink": "https://www.reddit.com/r/rust/comments/1n272xv/released_ohkami_v024_a_performant_declarative_and/",
      "score": 50,
      "comments": 11,
      "post_id": "t3_1n272xv",
      "post_type": "link",
      "domain": "github.com",
      "author": "kanarus",
      "author_id": "t2_17etcoo0g1",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-28T08:55:38.798000+0000",
      "content_href": "https://github.com/ohkami-rs/ohkami",
      "content_preview": "",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": "https://styles.redditmedia.com/t5_capmjp/styles/profileIcon_0ny9ycdeiskd1.jpg?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=bc51bbb633e0e7937fe0172a002574cc8b1c311e"
    },
    {
      "title": "I made a crate to simplify `build.rs` scripts.",
      "permalink": "https://www.reddit.com/r/rust/comments/1n3riyw/i_made_a_crate_to_simplify_buildrs_scripts/",
      "score": 48,
      "comments": 28,
      "post_id": "t3_1n3riyw",
      "post_type": "text",
      "domain": "self.rust",
      "author": "ioannuwu",
      "author_id": "t2_xpo9vq7nv",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-30T03:34:06.072000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n3riyw/i_made_a_crate_to_simplify_buildrs_scripts/",
      "content_preview": "cargo-build is a wrapper around cargo instructions accesible in build.rs . cargo build on crates.io cargo build GitHub repo Those instructions are usually implemented by println!(\"cargo::\") call. This crate provides easy to use wrapper-functions and macros around those instructions to simplify your build scripts. With cargo-build: cargo_build::rustc_link_arg_bin(\"server\", \"-Wl,--cref\");\n\ncargo_build::rustc_link_arg_bin(\"client\", [\n        \"-mlongcalls\",\n        \"-ffunction-sections\",\n        \"-Wl,--cref\",\n]); Without cargo-build: println!(\"cargo::rustc-link-arg-bin=server=-Wl,--cref\");\nprintln!(\"cargo::rustc-link-arg-bin=client=-mlongcalls\");\nprintln!(\"cargo::rustc-link-arg-bin=client=-ffunction-sections\");\nprintln!(\"cargo::rustc-link-arg-bin=client=-Wl,--cref\"); With cargo-build using functions: cargo_build::rustc_check_cfgs(\"cuda\");\ncargo_build::rustc_cfg(\"cuda\");\n\ncargo_build::rustc_check_cfg(\"api_version\", [\"1\", \"2\", \"3\"]);\ncargo_build::rustc_cfg((\"api_version\", \"1\")); Without cargo-build: Note the inconsistancy of cfg . Note the need for escape sequences.println!(\"cargo::rustc-check-cfg=cfg(cuda)\"); println!(\"cargo::rustc-cfg=cuda\"); println!(\"cargo::rustc-check-cfg=cfg(api_version, values(\"1\", \"2\", \"3\"))\"); println!(\"cargo::rustc-cfg=api_version-\"1\"\"); Optional macros (enable features = [\"macros\"] in Cargo.toml): let env_var = \"HOST\";\n\nif std::env::var(env_var).is_ok() {\n    cargo_build::warning!(\"Warning during compilation: {} is not set\", env_var);\n    cargo_build::error!(\"Unable to finish compilation: {} is not set\", env_var);\n}\n\ncargo_build::rustc_link_arg!(cdylib: \"-mlongcalls\"; \"-ffunction-sections\");\n\ncargo_build::rustc_link_arg!(\n    bin \"client\":\n      \"-mlongcalls\";\n      \"-ffunction-sections\";\n      \"-Wl,--cref\";\n      \"stack-size={}\", { 8 * 1024 * 1024 };\n);\n\ncargo_build::rustc_link_lib!(\n    static: \"+whole-archive\", \"+verbatim\", \"+bundle\" =\n      \"nghttp2\";\n      \"libssl\";\n      \"libcrypto\";\n      \"mylib:{}\", \"renamed_lib\";\n);\n\ncargo_build::rustc_check_cfg!(\"api_version\": \"1\", \"2\", \"3\");\ncargo_build::rustc_cfg!(\"api_version\" = \"1\"); Why use cargo-build when cargo emit already exists: Support for modern features (such as error , rustc_check_cfg instructions). Support for 'keywords' (such as link-lib:KIND is not a string but defined set of values (static, dylib, framework)). Extended examples and documentation for modern use cases. Macros are optional feature - library can work even without them. Better syntax overall (such as static: \"lib1\"; \"lib2:{}\", \"renamed_lib2\"; \"lib3\" - no need to repeat code). I use build scripts often but they are really annoying, especially because each cargo instruction has its own syntax and there is no good examples in docs. I tried to include good examples for each use case, as well as include my own findings in docs to make writing build scripts with this library as easy as possible. Also I discovered some interesting features which make this library very pleasant to use even without macros. For example cargo_build::rerun_if_changed function can take both T and IntoIterator<T> as argument, and you don't need to import any traits to make it happen. You can discover this at GitHub repo",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": "https://styles.redditmedia.com/t5_b8v1of/styles/profileIcon_025pn049e60f1.png?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=6aac581d2adfe78ee3beb543ba3048813331f410"
    },
    {
      "title": "Building a Todo App in GPUI | 0xshadow's Blog",
      "permalink": "https://www.reddit.com/r/rust/comments/1n4hl5r/building_a_todo_app_in_gpui_0xshadows_blog/",
      "score": 47,
      "comments": 13,
      "post_id": "t3_1n4hl5r",
      "post_type": "link",
      "domain": "blog.0xshadow.dev",
      "author": "lazyhawk20",
      "author_id": "t2_3r13ykj8",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-31T00:59:30.729000+0000",
      "content_href": "https://blog.0xshadow.dev/posts/learning-gpui/gpui-todo-app/",
      "content_preview": "",
      "flair": [
        "üß† educational"
      ],
      "thumbnail_url": "https://external-preview.redd.it/wXCa7q0n0aclbv8IFCFHcf0TKOdhRCXVM7bdJNLSfcg.png?width=140&height=72&crop=140:72,smart&auto=webp&s=dad6f8406fc0a0fee7b68eab551d9280af53deaf"
    },
    {
      "title": "Question about turbofish syntax",
      "permalink": "https://www.reddit.com/r/rust/comments/1n47sqf/question_about_turbofish_syntax/",
      "score": 39,
      "comments": 38,
      "post_id": "t3_1n47sqf",
      "post_type": "text",
      "domain": "self.rust",
      "author": "valdocs_user",
      "author_id": "t2_61t42v7z",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-30T17:44:57.732000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n47sqf/question_about_turbofish_syntax/",
      "content_preview": "Is this following: let mut basket = HashMap::<String, u32>::new(); Best understood as: let mut basket = HashMap ::< String, u32 >:: new(); Or as: let mut basket = HashMap::<String, u32> :: new(); That is, are ::< and >:: some sort of trigraphs that bookend the list of type arguments, or are we looking at three different tokens, ::< , > , and :: ?",
      "flair": [],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_7.png"
    },
    {
      "title": "RSVIM v0.1.2 just released!",
      "permalink": "https://www.reddit.com/r/rust/comments/1n29rr7/rsvim_v012_just_released/",
      "score": 37,
      "comments": 11,
      "post_id": "t3_1n29rr7",
      "post_type": "link",
      "domain": "rsvim.github.io",
      "author": "linrongbin16",
      "author_id": "t2_txh6ccqg",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-28T11:33:46.864000+0000",
      "content_href": "https://rsvim.github.io/blog/2025/08/28/v0.1.2",
      "content_preview": "",
      "flair": [],
      "thumbnail_url": "https://styles.redditmedia.com/t5_7bb7qz/styles/profileIcon_asvfdhyhiskb1.jpg?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=a251ac31f13e7664d89b7a0be3b3039999012518"
    },
    {
      "title": "I built Rust BERT encoder",
      "permalink": "https://www.reddit.com/r/rust/comments/1n1ick5/i_built_rust_bert_encoder/",
      "score": 36,
      "comments": 4,
      "post_id": "t3_1n1ick5",
      "post_type": "text",
      "domain": "self.rust",
      "author": "mr_potatohead_",
      "author_id": "t2_10soeg",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T14:19:44.249000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n1ick5/i_built_rust_bert_encoder/",
      "content_preview": "I needed vector embeddings in Rust, i was doing an offline RAG system in Rust, and was trying to minimize pulling in big runtimes or C/C++ dependencies. Someone mentioned ort, i got that to work but i thought that there was possibly a better solution. My use case was vector embeddings using all-MiniLM-L6-v2 , getting the encode to work on ort took some time, execution providers, session providers, environment builders? - maybe this is to be expected of a full fledged ML inference engine. What i wanted from sentence_transformers import SentenceTransformer\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\ntexts = [\"Hello world\", \"How are you?\"]\nembeddings = model.encode(texts) So i decided to ditch ort, and build a small library that can do inference. It now works, it's small and it produces correct embeddings. The code: use edgebert::{Model, ModelType}; \nlet model = Model::from_pretrained(ModelType::MiniLML6V2)?; \nlet texts = vec![\"Hello world\", \"How are you\"]; \nlet embeddings = model.encode(texts.clone(), true)?; Also, as it has minimal dependencies the side effect is that it is able to compile to WASM. import init, { WasmModel, WasmModelType } from './pkg/edgebert.js'; \n\nconst model = WasmModel.from_type(WasmModelType.MiniLML6V2); \nconst texts = [\"Hello world\", \"How are you\"]; \nconst embeddings = model.encode(texts, true); I decided to create a GitHub repo for it if anyone sees any use for it or better yet, wants to contribute, it's not overwhelming and most of it happens in one file src/lib.rs Performance is slower than sentence-transformers on CPU. Makes sense - they've had years of optimization. And i'm not really competing with them on speed, it's more about simplicity and portability. But i think there are still obvious wins if anyone spots them. The softmax and layer norm implementations feel suboptimal. You can see the code here https://github.com/olafurjohannsson/edgebert",
      "flair": [],
      "thumbnail_url": "https://styles.redditmedia.com/t5_1bm833/styles/profileIcon_2a44xbkuvkif1.jpeg?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=71235a9ea69e1cae29e0d9c044c69c3ce2ebc1f8"
    },
    {
      "title": "Has anyone had any experience with Burn?",
      "permalink": "https://www.reddit.com/r/rust/comments/1n36x61/has_anyone_had_any_experience_with_burn/",
      "score": 32,
      "comments": 9,
      "post_id": "t3_1n36x61",
      "post_type": "text",
      "domain": "self.rust",
      "author": "carrotboyyt",
      "author_id": "t2_8w24y1id",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-29T13:05:27.955000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n36x61/has_anyone_had_any_experience_with_burn/",
      "content_preview": "I've been using it recently for my neural network that works with audio and detects the genre of a song. This is essentially a test project. I'm more than happy with Burn and wonder if everyone's had the same impression.",
      "flair": [
        "üéôÔ∏è discussion"
      ],
      "thumbnail_url": ""
    },
    {
      "title": "CookCLI v0.15.1 Released - Major UI Overhaul, Recipe Doctor, and Smart Scaling!",
      "permalink": "https://www.reddit.com/r/rust/comments/1n3hlp4/cookcli_v0151_released_major_ui_overhaul_recipe/",
      "score": 30,
      "comments": 2,
      "post_id": "t3_1n3hlp4",
      "post_type": "crosspost",
      "domain": "reddit.com",
      "author": "_dubadub_",
      "author_id": "t2_j5cc2",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-29T19:59:32.380000+0000",
      "content_href": "/r/cooklang/comments/1n3hays/cookcli_v0151_released_major_ui_overhaul_recipe/",
      "content_preview": "",
      "flair": [],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_2.png"
    },
    {
      "title": "The Embedded Rustacean Issue #53",
      "permalink": "https://www.reddit.com/r/rust/comments/1n3foqi/the_embedded_rustacean_issue_53/",
      "score": 29,
      "comments": 0,
      "post_id": "t3_1n3foqi",
      "post_type": "link",
      "domain": "theembeddedrustacean.com",
      "author": "TheEmbeddedRustacean",
      "author_id": "t2_10lq1ii6ng",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-29T18:44:29.108000+0000",
      "content_href": "https://www.theembeddedrustacean.com/p/the-embedded-rustacean-issue-53",
      "content_preview": "",
      "flair": [],
      "thumbnail_url": "https://styles.redditmedia.com/t5_bjp9zz/styles/profileIcon_97s3jhggb31d1.png?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=773be537d0db4d79bb19f862591474a302c96e2b"
    },
    {
      "title": "Announcing yfinance-rs: A modern, async Rust client for the Yahoo Finance API",
      "permalink": "https://www.reddit.com/r/rust/comments/1n13nld/announcing_yfinancers_a_modern_async_rust_client/",
      "score": 29,
      "comments": 5,
      "post_id": "t3_1n13nld",
      "post_type": "text",
      "domain": "self.rust",
      "author": "Rare-Vegetable-3420",
      "author_id": "t2_1thh1vvkje",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T01:13:27.999000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n13nld/announcing_yfinancers_a_modern_async_rust_client/",
      "content_preview": "Hey r/rust ! I'm excited to share a crate I've been working on, yfinance-rs , a new, ergonomic client for the unofficial Yahoo Finance API. My goal was to create a library that feels familiar to users of the popular Python yfinance library but is built from the ground up to leverage the safety and performance of asynchronous Rust. It's designed to be a reliable tool for everything from simple stock price lookups to more complex financial data analysis. The underlying API is publicly accessible, meaning you can start pulling data immediately with no registration or API keys required . Key Features I tried to make it as comprehensive and resilient as possible: Modern Async API : Built on tokio and reqwest . High-Level Ticker Interface : A simple, powerful way to access all data for a single symbol (e.g., Ticker::new(client, \"AAPL\") ). Comprehensive Data Coverage : Historical OHLCV data with automatic price adjustments. Multi-symbol concurrent downloads ( DownloadBuilder ). Company profiles, financials (income, balance, cash flow), and corporate calendars. Options chains and expiration dates. Analyst ratings, holder information, and ESG scores. Latest news articles and press releases. Real-time Streaming : Get live quote updates via WebSockets, with an automatic fallback to HTTP polling if the connection fails. Robust Scraping : For data not available in the JSON API (like company profiles), it uses a resilient, multi-strategy scraping system to avoid breaking when Yahoo updates their site layout. Ergonomic Builders : Fluent builders for constructing complex queries for historical data, news, search, and more. Quick Start Getting started is simple. Here's how you can fetch the latest price and 6 months of history for Apple: use yfinance_rs::{Interval, Range, Ticker, YfClient};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = YfClient::default();\n    let ticker = Ticker::new(client, \"AAPL\".to_string());\n\n    // Get the latest quote\n    let quote = ticker.quote().await?;\n    println!(\"Latest price for AAPL: ${:.2}\", quote.regular_market_price.unwrap_or(0.0));\n\n    // Get historical data for the last 6 months\n    let history = ticker.history(Some(Range::M6), Some(Interval::D1), false).await?;\n    if let Some(last_bar) = history.last() {\n        println!(\"Last closing price: ${:.2} on {}\", last_bar.close, last_bar.ts);\n    }\n\n    Ok(())\n} Streaming Example You can also easily stream real-time updates for multiple tickers: use yfinance_rs::{StreamBuilder, StreamMethod};\nuse tokio::time::{self, Duration};\n\nasync fn stream_quotes() -> Result<(), Box<dyn std::error::Error>> {\n    let client = yfinance_rs::YfClient::default();\n    \n    println!(\"Streaming real-time quotes for MSFT and GOOG...\");\n    let (handle, mut receiver) = StreamBuilder::new(&client)?\n        .symbols(vec![\"MSFT\", \"GOOG\"])\n        .method(StreamMethod::WebsocketWithFallback)\n        .start()?;\n\n    let stream_task = tokio::spawn(async move {\n        while let Some(update) = receiver.recv().await {\n            println!(\"[{}] {} @ {:.2}\", update.ts, update.symbol, update.last_price.unwrap_or_default());\n        }\n    });\n\n    // Stop the stream after 15 seconds.\n    time::sleep(Duration::from_secs(15)).await;\n    handle.stop().await;\n    \n    Ok(())\n} Links The crate is open source and available now. Any feedback, suggestions, or bug reports would be a huge help. Crates.io : https://crates.io/crates/yfinance-rs GitHub : https://github.com/gramistella/yfinance-rs Docs.rs : https://docs.rs/yfinance-rs Thanks for checking it out!",
      "flair": [],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_2.png"
    },
    {
      "title": "PgDog adds support for Rust plugins",
      "permalink": "https://www.reddit.com/r/rust/comments/1n3b58q/pgdog_adds_support_for_rust_plugins/",
      "score": 28,
      "comments": 8,
      "post_id": "t3_1n3b58q",
      "post_type": "link",
      "domain": "pgdog.dev",
      "author": "levkk1",
      "author_id": "t2_ji5rf6nd",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-29T15:52:26.184000+0000",
      "content_href": "https://pgdog.dev/blog/plugins-are-back",
      "content_preview": "",
      "flair": [],
      "thumbnail_url": "https://styles.redditmedia.com/t5_5tmq2a/styles/profileIcon_0l87lnncq1gf1.png?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=512067715f1cd438bda0128d51d70119d3466339"
    },
    {
      "title": "Ownership metaphor",
      "permalink": "https://www.reddit.com/r/rust/comments/1n1zqpv/ownership_metaphor/",
      "score": 28,
      "comments": 31,
      "post_id": "t3_1n1zqpv",
      "post_type": "text",
      "domain": "self.rust",
      "author": "Bugibhub",
      "author_id": "t2_2kuy28pa",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-28T01:51:48.443000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n1zqpv/ownership_metaphor/",
      "content_preview": "I recently tried to explained rust ownership system with the following analogy. What do you think about it? Is it clear? Is there something incorrect or misleading about it? You can think of ownership in Rust like the ownership of a painting: I own a painting: let mut painting = Painting::from(DOG); At the same time, I can either: Open an exhibition and sell tickets to see the painting in its current state . Anyone owning a ticket can come and see the painting. But visitors can't touch the original painting . fn visit_exhibition(ticket: &Painting) That applies to the owner too, as long as there are tickets in circulation for the painting as it is right now (painting of a DOG), I am obligated to keep the exhibition open. 2. OR Ask a painter to come work on my painting : fn paint_a_cat(painting: &mut Painting) {\n    painting.subject.push(CAT);\n} But I can't add a CAT to the painting until all dog-lovers tickets have been destroyed, or I'll be sued for selling tickets for a painting I can't show anymore. I can also sell or give the painting to someone else and give them full ownership of it, but then I cannot continue to display it or change it like if it was still mine. Edit: Taking into account the comments, I updated the metaphor to an exhibition ticket with a pet twist to highlight the race conditions and similar. Updated the example code below, too. Example",
      "flair": [
        "üß† educational"
      ],
      "thumbnail_url": ""
    },
    {
      "title": "Trying to get error backtraces in rust libraries right",
      "permalink": "https://www.reddit.com/r/rust/comments/1n0qhcz/trying_to_get_error_backtraces_in_rust_libraries/",
      "score": 26,
      "comments": 5,
      "post_id": "t3_1n0qhcz",
      "post_type": "link",
      "domain": "iroh.computer",
      "author": "matheusdev23",
      "author_id": "t2_13sd1t",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-26T16:26:33.287000+0000",
      "content_href": "https://www.iroh.computer/blog/error-handling-in-iroh",
      "content_preview": "",
      "flair": [
        "üß† educational"
      ],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_1.png"
    },
    {
      "title": "Learning Rust with a C++ Background",
      "permalink": "https://www.reddit.com/r/rust/comments/1n0p8wf/learning_rust_with_a_c_background/",
      "score": 26,
      "comments": 40,
      "post_id": "t3_1n0p8wf",
      "post_type": "text",
      "domain": "self.rust",
      "author": "konpapas9",
      "author_id": "t2_10tdcl2p1s",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-26T15:39:23.911000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n0p8wf/learning_rust_with_a_c_background/",
      "content_preview": "Hey Rustaceans. Recently I've wanted to learn Rust and have started reading the Rust Book. I have found it really hard to get used to the syntax(which btw fight me if you want but is harder than c++ syntax) and the language as a whole, so I was wondering if you all have any tips, like maybe project ideas that will get me comfortable or anything else really.",
      "flair": [
        "üôã seeking help & advice"
      ],
      "thumbnail_url": ""
    },
    {
      "title": "Senior project",
      "permalink": "https://www.reddit.com/r/rust/comments/1n440mc/senior_project/",
      "score": 24,
      "comments": 29,
      "post_id": "t3_1n440mc",
      "post_type": "text",
      "domain": "self.rust",
      "author": "Little-Bookkeeper835",
      "author_id": "t2_1bmfidkk68",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-30T15:09:37.806000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n440mc/senior_project/",
      "content_preview": "Doing my capstone project on something rust themed. I talked with my professor and he thinks writing a compiler would be a good project. I really would like to write a compiler for rust or at least the syntactic analyzer. Can I write that in rust? I'd like it if my project was in rust. I may just do my own compiler in rust.",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_0.png"
    },
    {
      "title": "threeway_merge - 100% Git-compatible 3-way string merging in Rust",
      "permalink": "https://www.reddit.com/r/rust/comments/1n1byz5/threeway_merge_100_gitcompatible_3way_string/",
      "score": 21,
      "comments": 3,
      "post_id": "t3_1n1byz5",
      "post_type": "text",
      "domain": "self.rust",
      "author": "shiueo",
      "author_id": "t2_vrfnkarj",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T09:04:47.811000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n1byz5/threeway_merge_100_gitcompatible_3way_string/",
      "content_preview": "So I was working on a project that needed to merge text changes (think collaborative editing), and I needed something that worked exactly like git merge-file but for strings in memory. Looked around and the existing options were either: Required writing to temp files (I wanted to work directly with strings) Didn't handle conflicts the same way Git does Missing some of the merge strategies I wanted So I ended up wrapping libgit2's xdiff library (the same C code Git uses) with Rust bindings. use threeway_merge::{merge_strings, MergeOptions};\nlet result = merge_strings(base, ours, theirs, &MergeOptions::default())?; It supports all Git merge algorithms (Myers, Patience, Histogram, etc.) and conflict styles (normal, diff3, zdiff3). You can also favor one side automatically or combine changes with the union strategy. I wrote tests that run git merge-file and compare outputs feature by feature, and my crate passes 100% of them. Anyway, figured others might need this too so I put it on crates.io: https://crates.io/crates/threeway_merge Code's here if anyone's curious about the implementation: https://github.com/levish0/threeway-merge-rs",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": "https://styles.redditmedia.com/t5_7uoe33/styles/profileIcon_kyftjnfhsmbf1.png?width=64&height=64&frame=1&auto=webp&crop=64%3A64%2Csmart&s=ff07b7d69bf7677eea9e5863105e09f7cc194bfd"
    },
    {
      "title": "Problem with generics, can't do arithmetic + proposed solution",
      "permalink": "https://www.reddit.com/r/rust/comments/1n32ue7/problem_with_generics_cant_do_arithmetic_proposed/",
      "score": 20,
      "comments": 27,
      "post_id": "t3_1n32ue7",
      "post_type": "multi_media",
      "domain": "self.rust",
      "author": "alikola",
      "author_id": "t2_btddm09",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-29T09:34:47.455000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n32ue7/problem_with_generics_cant_do_arithmetic_proposed/",
      "content_preview": "The Problem I have the following problem. I have a struct with a generic type Depth . Then I use Depth to create an array. struct SomeStruct<const Depth: usize> {\n    foo: [u64; Depth]\n} The issue is that I need the size of foo to be Depth+1 . Since it's a const generic, I can't directly do arithmetic. This doesn‚Äôt work: struct SomeStruct<const Depth: usize> {\n    foo: [u64; Depth+1]\n} Requirements: I need an array of size Depth+1 . Depth won‚Äôt be very large, and foo will be accessed frequently, so I prefer it to be on the stack. That‚Äôs why I don‚Äôt want to use Vec . You may ask: why not just pass Depth+1 directly? Well, I removed other logic for simplicity, but I can‚Äôt do that. I could pass two generics ( Depth and DepthPlusOne ) and then assert the relation, but I‚Äôd rather avoid that. Not clean for a user using that. My Solution So I thought: what if I encapsulate it in a struct and simply add an extra field for the +1 element? Something like this: struct Foo<const Depth: usize> {\n    foo_depth: [u64; Depth],\n    foo_extra: u64\n} Since I need to index the array with [] , I implemented: impl <const Depth: usize> Index<usize> for Foo<Depth> {\n    type Output = u64;\n    #[inline]\n    fn index(&self, index: usize) -> &Self::Output {\n        if index < Depth {\n            &self.foo_depth[index]\n        } else if index == Depth {\n            &self.foo_extra\n        } else {\n            panic!(\"index out of bounds\");\n        }\n    }\n} For now, I don‚Äôt need iteration or mutation, so I haven‚Äôt implemented other methods. Something like this . What do you think of this solution?",
      "flair": [
        "üôã seeking help & advice"
      ],
      "thumbnail_url": ""
    },
    {
      "title": "Is there any advantage to using Rust for a Tauri frontend compared to JS/TS (apart from personal preferences)?",
      "permalink": "https://www.reddit.com/r/rust/comments/1n28qse/is_there_any_advantage_to_using_rust_for_a_tauri/",
      "score": 19,
      "comments": 24,
      "post_id": "t3_1n28qse",
      "post_type": "text",
      "domain": "self.rust",
      "author": "Red-Eye-Soul",
      "author_id": "t2_alcvw2oc",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-28T10:37:58.167000+0000",
      "content_href": "https://www.reddit.com/r/rust/comments/1n28qse/is_there_any_advantage_to_using_rust_for_a_tauri/",
      "content_preview": "Hi, getting back into using Tauri after a long time and I notice that its giving me the option of using Rust for the frontend. I have coded Rust for the backend before but never in the frontend and am much more comfortable with using typescript for that. I was wondering if there is a performance or architectural benefit from using Rust for the FE, such that it becomes worth it to try and learn it? Or is the performance of the FE constrained by the underlying framework that Tauri uses?",
      "flair": [
        "üôã seeking help & advice"
      ],
      "thumbnail_url": "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_4.png"
    },
    {
      "title": "GPUI Interactivity - Building a Counter App | 0xshadow's Blog",
      "permalink": "https://www.reddit.com/r/rust/comments/1n152aq/gpui_interactivity_building_a_counter_app/",
      "score": 19,
      "comments": 6,
      "post_id": "t3_1n152aq",
      "post_type": "link",
      "domain": "blog.0xshadow.dev",
      "author": "lazyhawk20",
      "author_id": "t2_3r13ykj8",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-27T02:20:01.512000+0000",
      "content_href": "https://blog.0xshadow.dev/posts/learning-gpui/gpui-interactivity/",
      "content_preview": "",
      "flair": [
        "üß† educational"
      ],
      "thumbnail_url": "https://external-preview.redd.it/TGAxGWL93BYL3dYEZGo0n-JG8fhdaNkqHakNF7_ioGE.png?width=140&height=74&crop=140:74,smart&auto=webp&s=77cdcb0213e45de071881d0405133fd418425b29"
    },
    {
      "title": "[Media] FirePilot - Tauri v2 based Firebase GUI ‚Äî looking for feedback",
      "permalink": "https://www.reddit.com/r/rust/comments/1n3y8s7/media_firepilot_tauri_v2_based_firebase_gui/",
      "score": 18,
      "comments": 2,
      "post_id": "t3_1n3y8s7",
      "post_type": "crosspost",
      "domain": "i.redd.it",
      "author": "excogitatr",
      "author_id": "t2_39qb74oe",
      "subreddit_id": "t5_2s7lj",
      "subreddit": "r/rust",
      "created_ts": "2025-08-30T10:28:40.949000+0000",
      "content_href": "/r/Firebase/comments/1mxypat/i_built_a_macos_gui_for_firebase_to_escape_the/",
      "content_preview": "",
      "flair": [
        "üõ†Ô∏è project"
      ],
      "thumbnail_url": "https://preview.redd.it/i-built-a-macos-gui-for-firebase-to-escape-the-web-console-v0-6wqqr8dn5rkf1.gif?width=640&crop=smart&format=png8&s=0b5512bad1f0389500a93ff5311926d3f8199885"
    }
  ],
  "scraped_at": "2025-09-02T05:47:25.470057"
}